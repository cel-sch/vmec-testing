import numpy as np 

imag = 1.0j 

class M_00:
    def __init__(self,eq,ntor):

        #Convention is: 00,01,10,11.
        self.DerBs = [False,True,False,True]


        self.DerPol_DerBs01 = [[0,],[0,],[0,]]

        self.var_D01 = np.zeros(shape=(1,eq.R.shape[0], eq.R.shape[1]), dtype=complex)
        self.var_D01[0] = (6*eq.r)/(1 + eq.delta + eq.r**2)**3 + (3*eq.alpha**2*eq.r)/(1 + eq.delta + eq.r**2)**3 + (24*eq.delta*eq.r)/(1 + eq.delta + eq.r**2)**3 + (12*eq.alpha**2*eq.delta*eq.r)/(1 + eq.delta + eq.r**2)**3 + (36*eq.delta**2*eq.r)/(1 + eq.delta + eq.r**2)**3 + (18*eq.alpha**2*eq.delta**2*eq.r)/(1 + eq.delta + eq.r**2)**3 + (24*eq.delta**3*eq.r)/(1 + eq.delta + eq.r**2)**3 + (12*eq.alpha**2*eq.delta**3*eq.r)/(1 + eq.delta + eq.r**2)**3 + (6*eq.delta**4*eq.r)/(1 + eq.delta + eq.r**2)**3 + (3*eq.alpha**2*eq.delta**4*eq.r)/(1 + eq.delta + eq.r**2)**3 - (16*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (8*eq.alpha**2*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (48*eq.delta*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (24*eq.alpha**2*eq.delta*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (48*eq.delta**2*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (24*eq.alpha**2*eq.delta**2*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (16*eq.delta**3*eq.r**3)/(1 + eq.delta + eq.r**2)**3 - (8*eq.alpha**2*eq.delta**3*eq.r**3)/(1 + eq.delta + eq.r**2)**3 + (12*eq.r**5)/(1 + eq.delta + eq.r**2)**3 + (6*eq.alpha**2*eq.r**5)/(1 + eq.delta + eq.r**2)**3 + (24*eq.delta*eq.r**5)/(1 + eq.delta + eq.r**2)**3 + (12*eq.alpha**2*eq.delta*eq.r**5)/(1 + eq.delta + eq.r**2)**3 + (12*eq.delta**2*eq.r**5)/(1 + eq.delta + eq.r**2)**3 + (6*eq.alpha**2*eq.delta**2*eq.r**5)/(1 + eq.delta + eq.r**2)**3 - (2*eq.r**9)/(1 + eq.delta + eq.r**2)**3 - (eq.alpha**2*eq.r**9)/(1 + eq.delta + eq.r**2)**3 + (6*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (24*eq.delta*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (36*eq.delta**2*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (24*eq.delta**3*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (6*eq.delta**4*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (12*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (36*eq.delta*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (36*eq.delta**2*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (12*eq.delta**3*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (10*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (36*eq.delta*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (42*eq.delta**2*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (16*eq.delta**3*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (20*eq.r**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (40*eq.delta*eq.r**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (20*eq.delta**2*eq.r**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (8*eq.r**5*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (20*eq.delta*eq.r**5*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 + (12*eq.delta**2*eq.r**5*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (4*eq.r**6*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (4*eq.delta*eq.r**6*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (2*eq.r**7*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (4*eq.r**8*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (2*eq.r**9*eq.shear**2)/(1 + eq.delta + eq.r**2)**3 - (3*eq.alpha**2*eq.r*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (12*eq.alpha**2*eq.delta*eq.r*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (18*eq.alpha**2*eq.delta**2*eq.r*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (12*eq.alpha**2*eq.delta**3*eq.r*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (3*eq.alpha**2*eq.delta**4*eq.r*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (8*eq.alpha**2*eq.r**3*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (24*eq.alpha**2*eq.delta*eq.r**3*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (24*eq.alpha**2*eq.delta**2*eq.r**3*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (8*eq.alpha**2*eq.delta**3*eq.r**3*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (6*eq.alpha**2*eq.r**5*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (12*eq.alpha**2*eq.delta*eq.r**5*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (6*eq.alpha**2*eq.delta**2*eq.r**5*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (eq.alpha**2*eq.r**9*np.cos((2*eq.r)/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (12*eq.alpha*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (48*eq.alpha*eq.delta*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (72*eq.alpha*eq.delta**2*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (48*eq.alpha*eq.delta**3*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (12*eq.alpha*eq.delta**4*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (12*eq.alpha*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (36*eq.alpha*eq.delta*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (36*eq.alpha*eq.delta**2*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (12*eq.alpha*eq.delta**3*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (32*eq.alpha*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (96*eq.alpha*eq.delta*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (96*eq.alpha*eq.delta**2*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (32*eq.alpha*eq.delta**3*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (20*eq.alpha*eq.r**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (40*eq.alpha*eq.delta*eq.r**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (20*eq.alpha*eq.delta**2*eq.r**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (24*eq.alpha*eq.r**5*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (48*eq.alpha*eq.delta*eq.r**5*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 + (24*eq.alpha*eq.delta**2*eq.r**5*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (4*eq.alpha*eq.r**6*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (4*eq.alpha*eq.delta*eq.r**6*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (4*eq.alpha*eq.r**8*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3 - (4*eq.alpha*eq.r**9*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**3


        self.DerPol_DerBs11 = [[0,],[0,],[0,]]

        self.var_D11 = np.zeros(shape=(1,eq.R.shape[0], eq.R.shape[1]), dtype=complex)
        self.var_D11[0] = -(1 + eq.delta + eq.r**2)**(-2) - (4*eq.delta)/(1 + eq.delta + eq.r**2)**2 - (6*eq.delta**2)/(1 + eq.delta + eq.r**2)**2 - (4*eq.delta**3)/(1 + eq.delta + eq.r**2)**2 - eq.delta**4/(1 + eq.delta + eq.r**2)**2 + (4*eq.r**2)/(1 + eq.delta + eq.r**2)**2 + (12*eq.delta*eq.r**2)/(1 + eq.delta + eq.r**2)**2 + (12*eq.delta**2*eq.r**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.delta**3*eq.r**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.r**4)/(1 + eq.delta + eq.r**2)**2 - (12*eq.delta*eq.r**4)/(1 + eq.delta + eq.r**2)**2 - (6*eq.delta**2*eq.r**4)/(1 + eq.delta + eq.r**2)**2 + (4*eq.r**6)/(1 + eq.delta + eq.r**2)**2 + (4*eq.delta*eq.r**6)/(1 + eq.delta + eq.r**2)**2 - eq.r**8/(1 + eq.delta + eq.r**2)**2 - eq.shear**2/(1 + eq.delta + eq.r**2)**2 - (4*eq.delta*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.delta**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (4*eq.delta**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (eq.delta**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (2*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (6*eq.delta*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (6*eq.delta**2*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (2*eq.delta**3*eq.r*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (3*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (10*eq.delta*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (11*eq.delta**2*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.delta**3*eq.r**2*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (12*eq.delta*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.delta**2*eq.r**3*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (4*eq.r**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (10*eq.delta*eq.r**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.delta**2*eq.r**4*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (6*eq.r**5*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (6*eq.delta*eq.r**5*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (3*eq.r**6*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.delta*eq.r**6*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (2*eq.r**7*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (eq.r**8*eq.shear**2)/(1 + eq.delta + eq.r**2)**2 - (2*eq.alpha*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (8*eq.alpha*eq.delta*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (12*eq.alpha*eq.delta**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (8*eq.alpha*eq.delta**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (2*eq.alpha*eq.delta**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (2*eq.alpha*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (6*eq.alpha*eq.delta*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (6*eq.alpha*eq.delta**2*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (2*eq.alpha*eq.delta**3*eq.r*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (8*eq.alpha*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (24*eq.alpha*eq.delta*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (24*eq.alpha*eq.delta**2*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (8*eq.alpha*eq.delta**3*eq.r**2*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (6*eq.alpha*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (12*eq.alpha*eq.delta*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (6*eq.alpha*eq.delta**2*eq.r**3*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (12*eq.alpha*eq.r**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (24*eq.alpha*eq.delta*eq.r**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (12*eq.alpha*eq.delta**2*eq.r**4*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (6*eq.alpha*eq.r**5*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (6*eq.alpha*eq.delta*eq.r**5*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (8*eq.alpha*eq.r**6*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 + (8*eq.alpha*eq.delta*eq.r**6*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (2*eq.alpha*eq.r**7*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (2*eq.alpha*eq.r**8*eq.shear*np.sin(eq.r/(1 + eq.delta - eq.r**2)))/(1 + eq.delta + eq.r**2)**2 - (eq.alpha**2*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (4*eq.alpha**2*eq.delta*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.alpha**2*eq.delta**2*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (4*eq.alpha**2*eq.delta**3*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (eq.alpha**2*eq.delta**4*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.alpha**2*eq.r**2*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 + (12*eq.alpha**2*eq.delta*eq.r**2*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 + (12*eq.alpha**2*eq.delta**2*eq.r**2*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.alpha**2*eq.delta**3*eq.r**2*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.alpha**2*eq.r**4*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (12*eq.alpha**2*eq.delta*eq.r**4*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (6*eq.alpha**2*eq.delta**2*eq.r**4*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.alpha**2*eq.r**6*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 + (4*eq.alpha**2*eq.delta*eq.r**6*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2 - (eq.alpha**2*eq.r**8*np.sin(eq.r/(1 + eq.delta - eq.r**2))**2)/(1 + eq.delta + eq.r**2)**2
        




# Boundary Conditions 
#==============================================================#
class BC_0:
    def __init__(self,grid,eq,ntor):

        self.Axis = np.asarray(['Dirichlet']*grid.Mtot)
        self.Edge = np.asarray(['Dirichlet']*grid.Mtot)


